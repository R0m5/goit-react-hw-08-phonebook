{"version":3,"file":"static/js/739.1e47cd1c.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formInput\":\"ContactForm_formInput__GszVU\",\"addContactBtn\":\"ContactForm_addContactBtn__3KI6e\"};","import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operation';\nimport { selectContacts } from 'redux/selectors';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [contactName, setcontactName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (contacts.some(({ name }) => name === contactName)) {\n      window.alert(`${contactName} is already in your contacts`);\n      return;\n    }\n    dispatch(\n      addContact({\n        name: contactName,\n        number,\n        id: nanoid(),\n      })\n    );\n\n    setcontactName('');\n    setNumber('');\n  };\n\n  const handleChange = e => {\n    const { value, name } = e.target;\n\n    switch (name) {\n      case 'name':\n        setcontactName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.form}>\n      <label htmlFor=\"\" className={css.formLabel}>\n        Name\n        <input\n          value={contactName}\n          onChange={handleChange}\n          className={css.formInput}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label htmlFor=\"\" className={css.formLabel}>\n        Number\n        <input\n          value={number}\n          onChange={handleChange}\n          className={css.formInput}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\" className={css.addContactBtn}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactsList_contactList__qIIH9\",\"contactItem\":\"ContactsList_contactItem__r1MhY\",\"contactListBtn\":\"ContactsList_contactListBtn__SRc9c\",\"contactText\":\"ContactsList_contactText__r3+vD\"};","import PropTypes from 'prop-types';\nimport css from './ContactsList.module.css';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts, deleteContact } from 'redux/operation';\nimport { selectContacts, selectStatusFilter } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filtered = useSelector(selectStatusFilter);\n\n  const normalizedFilter = filtered.toLowerCase();\n  const filteredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter)\n  );\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={css.contactList}>\n      {filteredContacts.map(({ id, name, number }) => (\n        <li key={id} className={css.contactItem}>\n          <p className={css.contactText}>\n            {name}: {number}\n          </p>\n          <button\n            className={css.contactListBtn}\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.protoTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.string),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactLabel\":\"Filter_contactLabel__TqLYf\",\"contactInput\":\"Filter_contactInput__YRet6\"};","import PropTypes from 'prop-types';\nimport css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { selectStatusFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectStatusFilter);\n\n  const onChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n  return (\n    <label className={css.contactLabel}>\n      Find contacts by name\n      <input\n        className={css.contactInput}\n        type=\"text\"\n        name={filter}\n        value={filter}\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  OnChange: PropTypes.func,\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/operation';\nimport { selectError, selectIsLoading } from 'redux/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'start',\n      }}\n    >\n      <ContactForm />\n      <Filter />\n      <title>Contacts</title>\n      {isLoading && !error && (\n        <b\n          style={{\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            marginTop: '10px',\n          }}\n        >\n          Loading...\n        </b>\n      )}\n      <ContactList />\n    </div>\n  );\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","contacts","useSelector","selectContacts","dispatch","useDispatch","useState","contactName","setcontactName","number","setNumber","handleChange","e","target","value","name","onSubmit","preventDefault","some","window","alert","addContact","className","css","htmlFor","onChange","type","pattern","title","required","ContactList","normalizedFilter","selectStatusFilter","toLowerCase","filteredContacts","filter","includes","useEffect","fetchContacts","map","onClick","deleteContact","protoTypes","PropTypes","onDeleteContact","Filter","setFilter","Contacts","isLoading","selectIsLoading","error","selectError","style","display","flexDirection","alignItems","marginLeft","marginRight","marginTop","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}